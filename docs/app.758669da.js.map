{"mappings":"AAEA,MAAMA,EAAQC,SAASC,eAAe,SAChCC,EAAUF,SAASG,iBAAiB,aACpCC,EAAQJ,SAASK,cAAc,UAC/BC,EAAQN,SAASK,cAAc,UAC/BE,EAAQP,SAASK,cAAc,UAErC,IAAIG,EACAC,EAAO,KAoCX,SAASC,EAAQC,GAChB,MAAMC,EAAUC,KAAKC,MAAMH,EAAU,IAC/BI,EAAmBJ,EAAU,GAE7BK,EAAQ,GAAAC,OAAML,EAAN,KAAAK,OAAiBF,EAAmB,EAAIA,EAAvB,IAAAE,OAA8CF,IAE7Ef,SAASkB,MAAQF,EACjBjB,EAAMoB,YAAcH,EAGrBd,EAAQkB,QAASC,GAChBA,EAAOC,iBAAiB,QAAS,KAChCC,cAAcf,GACdC,EAAOe,SAASH,EAAOI,QAAQhB,MAC/BC,EAAQD,MAIVH,EAAMgB,iBAAiB,SAnDvB,WACCC,cAAcf,GAEdD,EAAMY,YAAc,QACpBf,EAAOG,QACPG,EAAQD,GAER,MACMiB,EADMC,KAAKC,MACS,IAAPnB,EAEnBD,EAAYqB,YAAYC,UACvB,MAAMC,EAAclB,KAAKmB,OAAON,EAAOC,KAAKC,OAAS,KAIrD,GAHAlB,EAAQqB,GACRtB,EAAOsB,EAEHA,GAAe,EAWlB,OAVAR,cAAcf,GAEdJ,EAAM6B,OApBM,IAqBZ7B,EAAM8B,MAAO,EACb9B,EAAM+B,OChCFL,eAA4BZ,GAAkD,IAAnCkB,EAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAChF,MAAMG,QAAmBC,aAAaC,oBACnB,YAAfF,GACH,IAAIC,aAAavB,EAAOkB,GD8BvBO,CAAa,gBAAiB,CAC7BC,KAAM,mCAEPrC,EAAMY,YAAc,SAEb,GAIN,QAuBJZ,EAAMe,iBAAiB,QAAS,KAC/BlB,EAAMG,QACNgB,cAAcf,KAGfqC,OAAOvB,iBAAiB,mBAAoBQ,UAC3CpB,EAAQD,SACFgC,aAAaC,sBAMpBI,UAAUC,cACRC,SAHS,WAITtB,KAAKuB,IACLA,EAAaC,cAAgB,KAC5B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACD,cAA3BF,EAAiBG,QAChBR,UAAUC,cAAcQ,WAC3BC,QAAQC,IACP,iHAGDD,QAAQC,IAAI,4CAMhBC,MAAMC,IACNH,QAAQG,MAAM,4CAA6CA","sources":["./src/app.ts","./src/notification.ts"],"sourcesContent":["import { notification } from \"./notification\";\r\n\r\nconst timer = document.getElementById(\"timer\") as HTMLSpanElement;\r\nconst buttons = document.querySelectorAll(\".btn.time\") as NodeListOf<HTMLButtonElement>;\r\nconst alarm = document.querySelector(\"#alarm\") as HTMLMediaElement;\r\nconst start = document.querySelector(\".start\") as HTMLButtonElement;\r\nconst pause = document.querySelector(\".pause\") as HTMLButtonElement;\r\n\r\nlet countdown: NodeJS.Timeout;\r\nlet time = 1500;\r\nconst volume = 0.05;\r\n\r\nfunction startTimer() {\r\n\tclearInterval(countdown);\r\n\r\n\tpause.textContent = \"Pause\";\r\n\talarm!.pause();\r\n\tdisplay(time);\r\n\r\n\tconst now = Date.now();\r\n\tconst then = now + time * 1000;\r\n\r\n\tcountdown = setInterval(async () => {\r\n\t\tconst secondsLeft = Math.round((then - Date.now()) / 1000);\r\n\t\tdisplay(secondsLeft);\r\n\t\ttime = secondsLeft;\r\n\r\n\t\tif (secondsLeft <= 0) {\r\n\t\t\tclearInterval(countdown);\r\n\r\n\t\t\talarm.volume = volume;\r\n\t\t\talarm.loop = true;\r\n\t\t\talarm.play();\r\n\t\t\tnotification(\"Timer is done\", {\r\n\t\t\t\tbody: \"Time to take a 5 minute break!\",\r\n\t\t\t});\r\n\t\t\tpause.textContent = \"Reset\";\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// eslint-disable-next-line no-use-before-define\r\n\t}, 1000);\r\n}\r\n\r\nfunction display(seconds: number) {\r\n\tconst minutes = Math.floor(seconds / 60);\r\n\tconst remainderSeconds = seconds % 60;\r\n\r\n\tconst timeLeft = `${minutes}:${remainderSeconds > 9 ? remainderSeconds : `0${remainderSeconds}`}`;\r\n\r\n\tdocument.title = timeLeft;\r\n\ttimer.textContent = timeLeft;\r\n}\r\n\r\nbuttons.forEach((button: HTMLButtonElement) =>\r\n\tbutton.addEventListener(\"click\", () => {\r\n\t\tclearInterval(countdown);\r\n\t\ttime = parseInt(button.dataset.time!);\r\n\t\tdisplay(time);\r\n\t})\r\n);\r\n\r\nstart.addEventListener(\"click\", startTimer);\r\n\r\npause.addEventListener(\"click\", () => {\r\n\talarm.pause();\r\n\tclearInterval(countdown);\r\n});\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", async () => {\r\n\tdisplay(time);\r\n\tawait Notification.requestPermission();\r\n});\r\n\r\n//#region service worker\r\nconst sw = \"./sw.js\"; // it is needed because parcel will not recognize this as a file and not precess in its manner\r\n\r\nnavigator.serviceWorker\r\n\t.register(sw)\r\n\t.then(registration => {\r\n\t\tregistration.onupdatefound = () => {\r\n\t\t\tconst installingWorker = registration.installing;\r\n\t\t\tif (installingWorker == null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\tif (installingWorker.state === \"installed\") {\r\n\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t};\r\n\t})\r\n\t.catch(error => {\r\n\t\tconsole.error(\"Error during service worker registration:\", error);\r\n\t});\r\n//#endregion\r\n","export async function notification(title: string, options: NotificationOptions = {}) {\r\n\tconst permission = await Notification.requestPermission();\r\n\tif (permission === \"granted\") {\r\n\t\tnew Notification(title, options);\r\n\t}\r\n}\r\n"],"names":["timer","document","getElementById","buttons","querySelectorAll","alarm","querySelector","start","pause","countdown","time","display","seconds","minutes","Math","floor","remainderSeconds","timeLeft","concat","title","textContent","forEach","button","addEventListener","clearInterval","parseInt","dataset","then","Date","now","setInterval","async","secondsLeft","round","volume","loop","play","options","arguments","length","undefined","permission","Notification","requestPermission","$c72d52fea231c671d506f1255ee8eb5$export$notification","body","window","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error"],"version":3,"file":"app.758669da.js.map"}